// JenkinsJob is a job defined on Jenkins. Normally corresponds to a project and contains builds.
message JenkinsJob {
	proto.ID id = 1;
	proto.Checksum checksum = 2;

	// reference to the customer_id who owns this object
	proto.UID customer_id = 3 [(proto.column).notnull=true,(proto.column).index=true];

	// Name is the name of the job. The jobs in Jenkins do not have ids, and use the name as ids instead, for example in the url. Name is also enforced to be unique. Renaming of jobs is unfortunately allowed. And it changes the job url as well.
	string name = 4 [(proto.column).notnull=true,(proto.column).type="VARCHAR(255)",(proto.column).index=true];

	// GitRepo is the url of the corresponding repository. Nil if not defined.
	string git_repo = 5 [(proto.column).type="VARCHAR(255)"];

	// URL links to the jobs page in jenkins web interface
	string url = 6 [(proto.column).notnull=true,(proto.column).type="VARCHAR(255)"];

	option (proto.table).has_one={table:"customer",pk:"customer_id",fk:"id",name:"customer"};	
}

// JenkinsBuild is the build on Jenkins. Jobs contains builds.
message JenkinsBuild {
	proto.ID id = 1;
	proto.Checksum checksum = 2;

	// reference to the customer_id who owns this object
	proto.UID customer_id = 3 [(proto.column).notnull=true,(proto.column).index=true];

	// JenkinsID is the build id, starts with 1 and increments, not unique across different jobs. In jenkins json API is returned as string, for this reason using string here as well instead int.

	// JenkinsBuildNumber can be used as id.
	// Not unique across different jobs. Very similar to jenkins id in their api, they are usually the same.
	// The jenkins version before 2015 used timestamp as ID, so it could be different.
	// Change background:
	// https://issues.jenkins-ci.org/browse/JENKINS-26520
	// We use number as id, because it is a part of build tag:
	// jenkins-jobname-buildnumber
	int64 jenkins_build_number = 4 [(proto.column).notnull=true,(proto.column).index=true];

	// all builds are created for a specific job
	proto.UID job_id = 5 [(proto.column).notnull=true,(proto.column).index=true];

	enum JenkinsBuildResult {
		// the state when the job is running
		RESULT_UNKNOWN = 0;
		// when the build completed successfully
		SUCCESS = 1;
		// when the build failed
		FAILURE = 2;
		// when the build was cancelled
		ABORTED = 3;
	}

	// Result is the result of the build.
	JenkinsBuildResult result = 6 [(proto.column).notnull=true];

	// When the build run was created in jenkins
	int64 created_at = 7 [(proto.column).notnull=true,(proto.column).type="BIGINT UNSIGNED"];

	// When the build run was finished or cancelled. Will be nil for running jobs.
	int64 finished_at = 8 [(proto.column).type="BIGINT UNSIGNED"];

	// Hash of the related commit if set, nil otherwise
	string sha = 9 [(proto.column).type="VARCHAR(255)"];
	
	// Branch of the related commit if set, nil otherwise
	string branch = 10 [(proto.column).type="VARCHAR(255)"];

	// URL links to the build page in jenkins web interface
	string url = 12 [(proto.column).notnull=true,(proto.column).type="VARCHAR(255)"];

	option (proto.table).has_one={table:"customer",pk:"customer_id",fk:"id",name:"customer"};	

	option (proto.table).has_one2={table:"jenkins_job",pk:"job_id",fk:"id",name:"job"};
	
}